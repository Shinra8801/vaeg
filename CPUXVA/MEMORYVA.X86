%include 'x86/np2asm.inc'


CPUADDR_SYSM	equ	0a0000h
CPUADDR_ROM0	equ	0e0000h
CPUADDR_ROM1	equ	0f0000h

CPUADDR_BACKUP	equ	0b0000h

BACKUPMEMORY_SIZE	equ	0x04000

section .bss

	global	_textmem
	global	_fontmem
	global	_backupmem
	global	_dicmem
	global	_rom0mem
	global	_rom1mem

	global	_va91rom0mem
	global	_va91rom1mem
	global	_va91dicmem

;TVRAM 256Kbytes
_textmem	resb	0x40000

;GVRAM 256Kbytes
;_grphmem	resb	0x40000

;漢字ROM
;	0x00000-0x3ffff 漢字ROM #1
;	0x40000-0x4ffff 漢字ROM #2
_fontmem	resb	0x50000

;バックアップRAM 16Kbytes
;	_fontmem の直後に配置すること。
_backupmem	resb	BACKUPMEMORY_SIZE

;辞書ROM
_dicmem		resb	0x80000

;ROM0
_rom0mem	resb	0xa0000

;ROM1
_rom1mem	resb	0x20000

;VA91 ROM0
_va91rom0mem	resb	0xa0000

;VA91 ROM1
_va91rom1mem	resb	0x10000

;VA91 辞書ROM
_va91dicmem		resb	0x80000


TEXTMEMORY	equ		_textmem
;GRPHMEMORY	equ		_grphmem
FONTMEMORY	equ		_fontmem
BACKUPMEMORY equ	_backupmem
DICMEMORY	equ		_dicmem
ROM0MEMORY	equ		_rom0mem
ROM1MEMORY	equ		_rom1mem


USEDEBUGCALL	equ		1

%if USEDEBUGCALL
extern		_pccore_debugmem

%macro	DEBUGCALL		0
			pushad
			push	edx
			push	ecx
			push	dword 0000h
			call	_pccore_debugmem
			add		esp, 4*3
			popad
%endmacro
%macro	DEBUGCALL_W		0
			pushad
			push	edx
			push	ecx
			push	dword 0001h
			call	_pccore_debugmem
			add		esp, 4*3
			popad
%endmacro
%else
%macro	DEBUGCALL		0
%endmacro
%macro	DEBUGCALL_W		0
%endmacro
%endif


%macro	JMPSYSMBANK		1
			xor		ebx, ebx
			mov		bl, [_dma_sysm_bank]
			test	bl, [_dma_access]
			jnz		%%selbank
			mov		bl, [_sysm_bank]
%%selbank:	and		bl, 0fh
			shl		ebx, 2
			jmp		[ebx + %1]
%endmacro

%macro	JMPROM0BANK		1
			xor		ebx, ebx
			mov		bl, [_rom0_bank]
			and		bl, 1fh
			shl		ebx, 2
			jmp		[ebx + %1]
%endmacro

%macro	JMPROM1BANK		1
			xor		ebx, ebx
			mov		bl, [_rom1_bank]
			and		bl, 0fh
			shl		ebx, 2
			jmp		[ebx + %1]
%endmacro

%macro	JMPVA91SYSMBANK		1
			xor		ebx, ebx
			mov		bl, [_va91 + va91_t.sysm_bank]
			and		bl, 0fh
			shl		ebx, 2
			jmp		[ebx + %1]
%endmacro




section .text

; ----------------------------------------------------------------- write byte

	extern	@i286_wt
	extern	@i286_wn
	extern	@bms_wt
	extern	@gvram_wt@8


; System memory area
					align	16
@sysm_wt:			JMPSYSMBANK	_sysmbyte_write
;					xor		ebx, ebx
;					mov		bl, [_sysm_bank]
;					and		bl, 0fh
;					shl		ebx, 2
;					jmp		[ebx + _sysmbyte_write]

; TVRAM
					align	16
@tvram_wt:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					mov		[TEXTMEMORY + ebx], dl
					mov		[_textmem_dirty], dword 1
					pop		ebx
					ret

; GVRAM
					align	16
@gvram_wt:			push	ecx
					sub		ecx, CPUADDR_SYSM
					call	@gvram_wt@8
					pop		ecx
					pop		ebx
					ret

; Backup RAM
					align	16

@knj2_wt:			cmp		ecx, 0b1fc0h
					jb		knj2_wt1
					cmp		ecx, 0b2000h
					jae		knj2_wt1

					test	byte [_backupmem_wp], 0ffh
					jnz		knj2_wt9

knj2_wt1:			mov		ebx, ecx
					sub		ebx, CPUADDR_BACKUP
					jc		knj2_wt9

					cmp		ebx, BACKUPMEMORY_SIZE
					jae		knj2_wt9

					mov		[BACKUPMEMORY + ebx], dl

knj2_wt9:			pop		ebx
					ret

; VA91 System memory area
					align	16
@va91sysm_wt:		JMPVA91SYSMBANK	_va91sysmbyte_write

; VA91 Backup RAM
					align	16

@va91knj2_wt:		mov		ebx, ecx
					sub		ebx, CPUADDR_BACKUP + 2000h
					jc		va91knj2_wt9

					cmp		ebx, BACKUPMEMORY_SIZE - 2000h
					jae		knj2_wt9

					mov		[BACKUPMEMORY + 2000h + ebx], dl

va91knj2_wt9:		pop		ebx
					ret

; ----------------------------------------------------------------- write word

	extern	@i286w_wt
	extern	@i286_wn
	extern	@bmsw_wt
	extern	@gvramw_wt@8


; System memory area
					align	16
@sysmw_wt:			JMPSYSMBANK	_sysmword_write
;					xor		ebx, ebx
;					mov		bl, [_sysm_bank]
;					and		bl, 0fh
;					shl		ebx, 2
;					jmp		[ebx + _sysmword_write]

; TVRAM
					align	16
@tvramw_wt:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					mov		[TEXTMEMORY + ebx], dx
					mov		[_textmem_dirty], dword 1
					pop		ebx
					ret

; GVRAM
					align	16
@gvramw_wt:			push	ecx
					sub		ecx, CPUADDR_SYSM
					call	@gvramw_wt@8
					pop		ecx
					pop		ebx
					ret

; Backup RAM
;	WORDアクセスした場合、下位バイトのみ書き込み
;	奇数アドレスからのWORDアクセスは通常通り書き込み
					align	16
@knj2w_wt:			test	cx,1
					jnz	knj2w_wt2
					jmp		@knj2_wt				;下位バイトのみ書き込み

knj2w_wt2:			inc		cx
					xchg	dh, dl
					push	dword knj2w_wt3
					push	ebx
					jmp		@knj2_wt

knj2w_wt3:			dec		cx
					xchg	dh, dl
					jmp		@knj2_wt

; VA91 System memory area
					align	16
@va91sysmw_wt:		JMPVA91SYSMBANK	_va91sysmword_write

; VA91 Backup RAM
;	WORDアクセスした場合、下位バイトのみ書き込み
;	奇数アドレスからのWORDアクセスは通常通り書き込み
					align	16
@va91knj2w_wt:		test	cx,1
					jnz		va91knj2w_wt2
					jmp		@va91knj2_wt			;下位バイトのみ書き込み

va91knj2w_wt2:		inc		cx
					xchg	dh, dl
					push	dword va91knj2w_wt3
					push	ebx
					jmp		@va91knj2_wt

va91knj2w_wt3:		dec		cx
					xchg	dh, dl
					jmp		@va91knj2_wt


; ----------------------------------------------------------------- read byte

	extern	@i286_rd
	extern	@bms_rd
	extern	@gvram_rd@4

; System memory area
					align	16
@sysm_rd:			JMPSYSMBANK	_sysmbyte_read
;					xor		ebx, ebx
;					mov		bl, [_sysm_bank]
;					and		bl, 0fh
;					shl		ebx, 2
;					jmp		[ebx + _sysmbyte_read]

; TVRAM
					align	16
@tvram_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					mov		al, [TEXTMEMORY + ebx]
					pop		ebx
					ret

; GVRAM
					align	16
@gvram_rd:			push	ecx
					sub		ecx, CPUADDR_SYSM
					call	@gvram_rd@4
					pop		ecx
					pop		ebx
					ret

; Kanji ROM / Backup RAM
					align	16
@knj1_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					jmp		knj_rd

					align	16
@knj2_rd:			mov		ebx, ecx
					cmp		ebx, CPUADDR_BACKUP + BACKUPMEMORY_SIZE
					jae		@i286_rn
					sub		ebx, CPUADDR_SYSM - 0x40000

knj_rd:				mov		al, [FONTMEMORY + ebx]
					pop		ebx
					ret

; non readable memory
					align	16
@i286_rn:			mov		al, 0ffh
					pop		ebx
					ret


; Dictionary ROM
					align	16
@dic1_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					jmp		dic_rd

@dic2_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM - 0x40000

dic_rd:				mov		al, [DICMEMORY + ebx]
					pop		ebx
					ret

; ROM area 0
					align	16
@rom0_rd:			JMPROM0BANK	_rom0byte_read

					align	16
@stdrom0_rd:		xor		ebx, ebx
					mov		bl, [_rom0_bank]
					cmp		bl, 0ah
					jae		@i286_rn

					shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM0

					mov		al, [ROM0MEMORY + ebx]
					pop		ebx
					ret


; ROM area 1
					align	16
@rom1_rd:			JMPROM1BANK	_rom1byte_read

					align	16
@stdrom1_rd:		xor		ebx, ebx
					mov		bl, [_rom1_bank]
					and		bl, 0bh
					test	bl, 08h
					jnz		@i286_rn

					test	bl, 02h
					jnz		rom1invalid_rd

					shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM1

					mov		al, [ROM1MEMORY + ebx]
					pop		ebx
					ret

; ROM area 1 「禁止」のバンク
; アドレスの下位16ビット(最下位ビットは0)が読み出される

rom1invalid_rd:		mov		ax, cx
					and		ax, 0fffeh
					test	cx, 1
					jnz		rom1invalid_rd9
					mov		al, ah
rom1invalid_rd9:	pop		ebx
					ret


; VA91 System memory area
					align	16
@va91sysm_rd:		JMPVA91SYSMBANK	_va91sysmbyte_read

; VA91 Backup RAM (map to VA2 backup RAM +0x2000)

					align	16
@va91knj2_rd:		mov		ebx, ecx
					cmp		ebx, CPUADDR_BACKUP + 0x2000
					jb		@i286_rn
					cmp		ebx, CPUADDR_BACKUP + BACKUPMEMORY_SIZE
					jae		@i286_rn
					sub		ebx, CPUADDR_SYSM - 0x40000

					mov		al, [FONTMEMORY + ebx]
					pop		ebx
					ret

; VA91 Dictionary ROM
					align	16
@va91dic1_rd:		mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					jmp		va91dic_rd

@va91dic2_rd:		mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM - 0x40000

va91dic_rd:			mov		al, [_va91dicmem + ebx]
					pop		ebx
					ret

; VA91 ROM area 0
					align	16
@va91rom0_rd:		xor		ebx, ebx
					mov		bl, [_va91 + va91_t.rom0_bank]
					cmp		bl, 0ah
					jae		@i286_rn

					shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM0

					mov		al, [_va91rom0mem + ebx]
					pop		ebx
					ret

; VA91 ROM area 1
					align	16
@va91rom1_rd:		xor		ebx, ebx
					;mov		bl, [_va91 + va91_t.rom1_bank]
					;cmp		bl, 0ah
					;jae		@i286_rn

					;shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM1

					mov		al, [_va91rom1mem + ebx]
					pop		ebx
					ret



; ----------------------------------------------------------------- read word

	extern	@i286w_rd
	extern	@bmsw_rd
	extern	@gvramw_rd@4

; System memory area
					align	16
@sysmw_rd:			JMPSYSMBANK	_sysmword_read
;					xor		ebx, ebx
;					mov		bl, [_sysm_bank]
;					and		bl, 0fh
;					shl		ebx, 2
;					jmp		[ebx + _sysmword_read]

; TVRAM
					align	16
@tvramw_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					mov		ax, [TEXTMEMORY + ebx]
					pop		ebx
					ret

; GVRAM
					align	16
@gvramw_rd:			push	ecx
					sub		ecx, CPUADDR_SYSM
					call	@gvramw_rd@4
					pop		ecx
					pop		ebx
					ret

; Kanji ROM / Backup RAM
;	WORDアクセスすると、上位バイトは下位バイトと同じものが読み込まれる
;	奇数アドレスからの読み込みの場合は、通常どおり読み込まれる
					align	16
@knj1w_rd:			test	cx,1
					jnz		knj1w_rd2

					push	dword knjXw_rd1
					push	ebx
					jmp		@knj1_rd

@knj2w_rd:			test	cx,1
					jnz		knj2w_rd2

					push	dword knjXw_rd1
					push	ebx
					jmp		@knj2_rd

knjXw_rd1:			mov		ah, al
					pop		ebx
					ret

knj1w_rd2:			
					inc		cx
					push	dword knj1w_rd3
					push	ebx
					jmp		@knj1_rd

knj1w_rd3:			dec		cx
					mov		ah, al
					jmp		@knj1_rd

knj2w_rd2:			
					inc		cx
					push	dword knj2w_rd3
					push	ebx
					jmp		@knj2_rd

knj2w_rd3:			dec		cx
					mov		ah, al
					jmp		@knj2_rd


; Dictionary ROM
					align	16
@dic1w_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					jmp		dicw_rd

@dic2w_rd:			mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM - 0x40000

dicw_rd:			mov		ax, [DICMEMORY + ebx]
					pop		ebx
					ret


; ROM area 0
					align	16
@rom0w_rd:			JMPROM0BANK	_rom0word_read

					align	16
@stdrom0w_rd:		xor		ebx, ebx
					mov		bl, [_rom0_bank]
					cmp		bl, 0ah
					jae		@i286w_rn

					shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM0

					mov		ax, [ROM0MEMORY + ebx]
					pop		ebx
					ret

; ROM area 1
					align	16
@rom1w_rd:			JMPROM1BANK	_rom1word_read

					align	16
@stdrom1w_rd:		xor		ebx, ebx
					mov		bl, [_rom1_bank]
					and		bl, 0bh
					test	bl, 08h
					jnz		@i286w_rn

					test	bl, 02h
					jnz		rom1invalidw_rd

					shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM1

					mov		ax, [ROM1MEMORY + ebx]
					pop		ebx
					ret

; non readable memory
					align	16
@i286w_rn:			mov		ax, 0ffffh
					pop		ebx
					ret


; ROM area 1 「禁止」のバンク
; アドレスの下位16ビット(最下位ビットは0)が読み出される

rom1invalidw_rd:	mov		ax, cx
					and		ax, 0fffeh
					test	cx, 1
					jnz		rom1invalidw_rd9
					xchg	al, ah
					add		al, 2
rom1invalidw_rd9:	pop		ebx
					ret


; VA91 System memory area
					align	16
@va91sysmw_rd:		JMPVA91SYSMBANK	_va91sysmword_read

; VA91 Backup RAM
					align	16
@va91knj2w_rd:		test	cx,1
					jnz		va91knj2w_rd2

					push	dword va91knjXw_rd1
					push	ebx
					jmp		@va91knj2_rd

va91knjXw_rd1:		mov		ah, al
					pop		ebx
					ret

va91knj2w_rd2:			
					inc		cx
					push	dword va91knj2w_rd3
					push	ebx
					jmp		@va91knj2_rd

va91knj2w_rd3:		dec		cx
					mov		ah, al
					jmp		@va91knj2_rd

; VA91 Dictionary ROM
					align	16
@va91dic1w_rd:		mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM
					jmp		va91dicw_rd

@va91dic2w_rd:		mov		ebx, ecx
					sub		ebx, CPUADDR_SYSM - 0x40000

va91dicw_rd:		mov		ax, [_va91dicmem + ebx]
					pop		ebx
					ret

; VA91 ROM area 0
					align	16
@va91rom0w_rd:		xor		ebx, ebx
					mov		bl, [_va91 + va91_t.rom0_bank]
					cmp		bl, 0ah
					jae		@i286w_rn

					shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM0

					mov		ax, [_va91rom0mem + ebx]
					pop		ebx
					ret


; VA91 ROM area 1
					align	16
@va91rom1w_rd:		xor		ebx, ebx
					;mov		bl, [_va91 + va91_t.rom1_bank]
					;cmp		bl, 0ah
					;jae		@i286w_rn

					;shl		ebx, 16
					add		ebx, ecx
					sub		ebx, CPUADDR_ROM1

					mov		ax, [_va91rom1mem + ebx]
					pop		ebx
					ret






section	.data

%if 0

	global	_sysm_bank
	global	_rom0_bank
	global	_rom1_bank
	global	_dma_sysm_bank
	global	_dma_access
	global	_backupmem_wp

_sysm_bank		db 1
_rom0_bank		db 0				;bit5  バススロットに開放
_rom1_bank		db 0				;bit4  バススロットに開放
									;bit3  常に0
_dma_sysm_bank	db 0				;bit7   0..CPUバンクに従う
									;bit6-4 常に0
									;bit3-0 バンク
_dma_access		db 0				;bit7   1..DMAからのメモリアクセスである
									;bit6-0 常に0
_backupmem_wp	db 0				;バックアップメモリ ライトプロテクト

%endif

			struc	memoryva_t

.sysm_bank		resb 1
.rom0_bank		resb 1				;bit5  バススロットに開放
.rom1_bank		resb 1				;bit4  バススロットに開放
									;bit3  常に0
.dma_sysm_bank	resb 1				;bit7   0..CPUバンクに従う
									;bit6-4 常に0
									;bit3-0 バンク
.dma_access		resb 1				;bit7   1..DMAからのメモリアクセスである
									;bit6-0 常に0
.backupmem_wp	resb 1				;バックアップメモリ ライトプロテクト

			endstruc


			struc	va91cfg_t
.enabled		resd 1
			endstruc

			struc	va91_t
.sysm_bank		resb 1				;bit3-0
.rom0_bank		resb 1				;bit3-0
.dmy			resb 2
.cfg			resb va91cfg_t_size
			endstruc


			global	_memoryva
			global	_dma_access
			global	_textmem_dirty

			global	_va91
			global	_va91cfg

_memoryva
	istruc	memoryva_t
	iend

_sysm_bank		equ	_memoryva + memoryva_t.sysm_bank
_rom0_bank		equ	_memoryva + memoryva_t.rom0_bank
_rom1_bank		equ	_memoryva + memoryva_t.rom1_bank
_dma_sysm_bank	equ	_memoryva + memoryva_t.dma_sysm_bank
_dma_access		equ	_memoryva + memoryva_t.dma_access
_backupmem_wp	equ	_memoryva + memoryva_t.backupmem_wp

_textmem_dirty	dd	0

_va91
	istruc	va91_t
	iend

_va91cfg
	istruc	va91cfg_t
		at va91cfg_t.enabled,	db 0
	iend

section .rdata

; ---------------------------------------------------------------------- table (write byte)

_membyte_write	dd	@i286_wt		; 00
				dd	@i286_wt		; 10
				dd	@i286_wt		; 20
				dd	@i286_wt		; 30
				dd	@i286_wt		; 40
				dd	@i286_wt		; 50
				dd	@i286_wt		; 60
				dd	@i286_wt		; 70
				dd	@bms_wt			; 80
				dd	@bms_wt			; 90
				dd	@sysm_wt		; a0
				dd	@sysm_wt		; b0
				dd	@sysm_wt		; c0
				dd	@sysm_wt		; d0
				dd	@i286_wn		; e0
				dd	@i286_wn		; f0

_sysmbyte_write	dd	@i286_wn		;0
				dd	@tvram_wt		;1
				dd	@i286_wn		;2
				dd	@i286_wn		;3
				dd	@gvram_wt		;4
				dd	@i286_wn		;5
				dd	@i286_wn		;6
				dd	@i286_wn		;7
				dd	@i286_wn		;8
				dd	@knj2_wt		;9
				dd	@i286_wn		;a
				dd	@i286_wn		;b
				dd	@i286_wn		;c
				dd	@i286_wn		;d
				dd	@i286_wn		;e
				dd	@va91sysm_wt	;@i286_wn		;f

_va91sysmbyte_write	dd	@i286_wn		;0
				dd	@i286_wn		;1
				dd	@i286_wn		;2
				dd	@i286_wn		;3
				dd	@i286_wn		;4
				dd	@i286_wn		;5
				dd	@i286_wn		;6
				dd	@i286_wn		;7
				dd	@i286_wn		;8
				dd	@va91knj2_wt	;9
				dd	@i286_wn		;a
				dd	@i286_wn		;b
				dd	@i286_wn		;c
				dd	@i286_wn		;d
				dd	@i286_wn		;e
				dd	@i286_wn		;f


; ---------------------------------------------------------------------- table (write word)

_memword_write	dd	@i286w_wt		; 00
				dd	@i286w_wt		; 10
				dd	@i286w_wt		; 20
				dd	@i286w_wt		; 30
				dd	@i286w_wt		; 40
				dd	@i286w_wt		; 50
				dd	@i286w_wt		; 60
				dd	@i286w_wt		; 70
				dd	@bmsw_wt		; 80
				dd	@bmsw_wt		; 90
				dd	@sysmw_wt		; a0
				dd	@sysmw_wt		; b0
				dd	@sysmw_wt		; c0
				dd	@sysmw_wt		; d0
				dd	@i286_wn		; e0
				dd	@i286_wn		; f0

_sysmword_write	dd	@i286_wn		;0
				dd	@tvramw_wt		;1
				dd	@i286_wn		;2
				dd	@i286_wn		;3
				dd	@gvramw_wt		;4
				dd	@i286_wn		;5
				dd	@i286_wn		;6
				dd	@i286_wn		;7
				dd	@i286_wn		;8
				dd	@knj2w_wt		;9
				dd	@i286_wn		;a
				dd	@i286_wn		;b
				dd	@i286_wn		;c
				dd	@i286_wn		;d
				dd	@i286_wn		;e
				dd	@va91sysmw_wt	;f

_va91sysmword_write	dd	@i286_wn	;0
				dd	@i286_wn		;1
				dd	@i286_wn		;2
				dd	@i286_wn		;3
				dd	@i286_wn		;4
				dd	@i286_wn		;5
				dd	@i286_wn		;6
				dd	@i286_wn		;7
				dd	@i286_wn		;8
				dd	@va91knj2w_wt	;9
				dd	@i286_wn		;a
				dd	@i286_wn		;b
				dd	@i286_wn		;c
				dd	@i286_wn		;d
				dd	@i286_wn		;e
				dd	@i286_wn		;f


; ---------------------------------------------------------------------- table (read byte)

_membyte_read	dd	@i286_rd		; 00
				dd	@i286_rd		; 10
				dd	@i286_rd		; 20
				dd	@i286_rd		; 30
				dd	@i286_rd		; 40
				dd	@i286_rd		; 50
				dd	@i286_rd		; 60
				dd	@i286_rd		; 70
				dd	@bms_rd			; 80
				dd	@bms_rd			; 90
				dd	@sysm_rd		; a0
				dd	@sysm_rd		; b0
				dd	@sysm_rd		; c0
				dd	@sysm_rd		; d0
				dd	@rom0_rd		; e0
				dd	@rom1_rd		; f0

_sysmbyte_read	dd	@i286_rn		;0
				dd	@tvram_rd		;1
				dd	@i286_rn		;2
				dd	@i286_rn		;3
				dd	@gvram_rd		;4
				dd	@i286_rn		;5
				dd	@i286_rn		;6
				dd	@i286_rn		;7
				dd	@knj1_rd		;8
				dd	@knj2_rd		;9
				dd	@i286_rn		;a
				dd	@i286_rn		;b
				dd	@dic1_rd		;c
				dd	@dic2_rd		;d
				dd	@i286_rn		;e
				dd	@va91sysm_rd	;@i286_rn		;f

_rom0byte_read	dd	@stdrom0_rd		;00
				dd	@stdrom0_rd		;01
				dd	@stdrom0_rd		;02
				dd	@stdrom0_rd		;03
				dd	@stdrom0_rd		;04
				dd	@stdrom0_rd		;05
				dd	@stdrom0_rd		;06
				dd	@stdrom0_rd		;07
				dd	@stdrom0_rd		;08
				dd	@stdrom0_rd		;09
				dd	@stdrom0_rd		;0a
				dd	@stdrom0_rd		;0b
				dd	@stdrom0_rd		;0c
				dd	@stdrom0_rd		;0d
				dd	@stdrom0_rd		;0e
				dd	@va91rom0_rd	;@stdrom0_rd		;0f
				dd	@stdrom0_rd		;10
				dd	@stdrom0_rd		;11
				dd	@stdrom0_rd		;12
				dd	@stdrom0_rd		;13
				dd	@stdrom0_rd		;14
				dd	@stdrom0_rd		;15
				dd	@stdrom0_rd		;16
				dd	@stdrom0_rd		;17
				dd	@stdrom0_rd		;18
				dd	@stdrom0_rd		;19
				dd	@stdrom0_rd		;1a
				dd	@stdrom0_rd		;1b
				dd	@stdrom0_rd		;1c
				dd	@stdrom0_rd		;1d
				dd	@stdrom0_rd		;1e
				dd	@stdrom0_rd		;1f

_rom1byte_read	dd	@stdrom1_rd		;0
				dd	@stdrom1_rd		;1
				dd	@stdrom1_rd		;2
				dd	@stdrom1_rd		;3
				dd	@stdrom1_rd		;4
				dd	@stdrom1_rd		;5
				dd	@stdrom1_rd		;6
				dd	@stdrom1_rd		;7
				dd	@stdrom1_rd		;8
				dd	@stdrom1_rd		;9
				dd	@stdrom1_rd		;a
				dd	@stdrom1_rd		;b
				dd	@stdrom1_rd		;c
				dd	@stdrom1_rd		;d
				dd	@stdrom1_rd		;e
				dd	@va91rom1_rd	;@stdrom1_rd		;f

_va91sysmbyte_read	dd	@i286_rn		;0
				dd	@i286_rn		;1
				dd	@i286_rn		;2
				dd	@i286_rn		;3
				dd	@i286_rn		;4
				dd	@i286_rn		;5
				dd	@i286_rn		;6
				dd	@i286_rn		;7
				dd	@i286_rn		;8
				dd	@va91knj2_rd	;9
				dd	@i286_rn		;a
				dd	@i286_rn		;b
				dd	@va91dic1_rd	;c
				dd	@va91dic2_rd	;d
				dd	@i286_rn		;e
				dd	@i286_rn		;f


; ---------------------------------------------------------------------- table (read word)

_memword_read	dd	@i286w_rd		; 00
				dd	@i286w_rd		; 10
				dd	@i286w_rd		; 20
				dd	@i286w_rd		; 30
				dd	@i286w_rd		; 40
				dd	@i286w_rd		; 50
				dd	@i286w_rd		; 60
				dd	@i286w_rd		; 70
				dd	@bmsw_rd		; 80
				dd	@bmsw_rd		; 90
				dd	@sysmw_rd		; a0
				dd	@sysmw_rd		; b0
				dd	@sysmw_rd		; c0
				dd	@sysmw_rd		; d0
				dd	@rom0w_rd		; e0
				dd	@rom1w_rd		; f0

_sysmword_read	dd	@i286w_rn		;0
				dd	@tvramw_rd		;1
				dd	@i286w_rn		;2
				dd	@i286w_rn		;3
				dd	@gvramw_rd		;4
				dd	@i286w_rn		;5
				dd	@i286w_rn		;6
				dd	@i286w_rn		;7
				dd	@knj1w_rd		;8
				dd	@knj2w_rd		;9
				dd	@i286w_rn		;a
				dd	@i286w_rn		;b
				dd	@dic1w_rd		;c
				dd	@dic2w_rd		;d
				dd	@i286w_rn		;e
				dd	@va91sysmw_rd	;@i286w_rn		;f

_rom0word_read	dd	@stdrom0w_rd	;00
				dd	@stdrom0w_rd	;01
				dd	@stdrom0w_rd	;02
				dd	@stdrom0w_rd	;03
				dd	@stdrom0w_rd	;04
				dd	@stdrom0w_rd	;05
				dd	@stdrom0w_rd	;06
				dd	@stdrom0w_rd	;07
				dd	@stdrom0w_rd	;08
				dd	@stdrom0w_rd	;09
				dd	@stdrom0w_rd	;0a
				dd	@stdrom0w_rd	;0b
				dd	@stdrom0w_rd	;0c
				dd	@stdrom0w_rd	;0d
				dd	@stdrom0w_rd	;0e
				dd	@va91rom0w_rd	;@stdrom0w_rd	;0f
				dd	@stdrom0w_rd	;10
				dd	@stdrom0w_rd	;11
				dd	@stdrom0w_rd	;12
				dd	@stdrom0w_rd	;13
				dd	@stdrom0w_rd	;14
				dd	@stdrom0w_rd	;15
				dd	@stdrom0w_rd	;16
				dd	@stdrom0w_rd	;17
				dd	@stdrom0w_rd	;18
				dd	@stdrom0w_rd	;19
				dd	@stdrom0w_rd	;1a
				dd	@stdrom0w_rd	;1b
				dd	@stdrom0w_rd	;1c
				dd	@stdrom0w_rd	;1d
				dd	@stdrom0w_rd	;1e
				dd	@stdrom0w_rd	;1f

_rom1word_read	dd	@stdrom1w_rd	;0
				dd	@stdrom1w_rd	;1
				dd	@stdrom1w_rd	;2
				dd	@stdrom1w_rd	;3
				dd	@stdrom1w_rd	;4
				dd	@stdrom1w_rd	;5
				dd	@stdrom1w_rd	;6
				dd	@stdrom1w_rd	;7
				dd	@stdrom1w_rd	;8
				dd	@stdrom1w_rd	;9
				dd	@stdrom1w_rd	;a
				dd	@stdrom1w_rd	;b
				dd	@stdrom1w_rd	;c
				dd	@stdrom1w_rd	;d
				dd	@stdrom1w_rd	;e
				dd	@va91rom1w_rd	;@stdrom1w_rd	;f

_va91sysmword_read	dd	@i286_rn		;0
				dd	@i286_rn		;1
				dd	@i286_rn		;2
				dd	@i286_rn		;3
				dd	@i286_rn		;4
				dd	@i286_rn		;5
				dd	@i286_rn		;6
				dd	@i286_rn		;7
				dd	@i286_rn		;8
				dd	@va91knj2w_rd	;9
				dd	@i286_rn		;a
				dd	@i286_rn		;b
				dd	@va91dic1w_rd	;c
				dd	@va91dic2w_rd	;d
				dd	@i286_rn		;e
				dd	@i286_rn		;f




section .text

	global	@i286_memorywrite_va@8
	global	@i286_memorywrite_va_w@8
	global	@i286_memoryread_va@4
	global	@i286_memoryread_va_w@4



					align	16
@i286_memorywrite_va@8:

					MEMTRACE
					DEBUGCALL
					push	ebx
					mov		ebx, ecx
					shr		ebx, 14
					and		ebx, byte 03ch
					jmp		[ebx + _membyte_write]


					align	16
@i286_memorywrite_va_w@8:

					MEMTRACE_W
					DEBUGCALL_W
					push	ebx
					mov		ebx, ecx
					inc		ebx
					;test	ebx, 7fffh
					je		short wword_bound
					shr		ebx, 14
					and		ebx, byte 03ch
					jmp		[ebx + _memword_write]
					align	16
wword_bound:		shr		ebx, 14
					and		ebx, byte 03ch
					xchg	dl, dh
					inc		ecx
					push	dword wword_bound2
					push	ebx
					jmp		[ebx + _membyte_write]
					align	16
wword_bound2:		xchg	dl, dh
					dec		ecx
					dec		ebx
					and		ebx, byte 03ch
					jmp		[ebx + _membyte_write]



					align	16
@i286_memoryread_va@4:
					push	ebx
					mov		ebx, ecx
					shr		ebx, 14
					and		ebx, byte 03ch
					jmp		[ebx + _membyte_read]


@i286_memoryread_va_w@4:
					push	ebx
					mov		ebx, ecx
					inc		ebx
					;test	ebx, 7fffh
					je		short rword_bound
					shr		ebx, 14
					and		ebx, byte 03ch
					jmp		[ebx + _memword_read]

					align	16
rword_bound:		shr		ebx, 14
					and		ebx, byte 03ch
					inc		ecx
					push	dword rword_bound2
					push	ebx
					jmp		[ebx + _membyte_read]
					align	16
rword_bound2:		mov		ah, al
					dec		ecx
					dec		ebx
					and		ebx, byte 03ch
					jmp		[ebx + _membyte_read]

